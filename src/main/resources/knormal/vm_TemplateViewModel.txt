package $ClassPackageName

import android.app.Application
import androidx.lifecycle.MutableLiveData
import com.srwing.b_applib.coreui.BaseViewModel
import com.srwing.t_network.base.BaseDataSource
import com.blankj.utilcode.util.ToastUtils
import $VM_MPackageName.$ClassPrefixEntity
import $VM_MPackageName.$ClassPrefixRepository

class $ClassPrefixViewModel(application: Application) : BaseViewModel(application) {

    private val repository by lazy { $ClassPrefixRepository() }

    internal val liveData by lazy { MutableLiveData<$ClassPrefixEntity>() }

    fun get$MethodName() {
        repository.get$MethodName(object : BaseDataSource.GetTaskCallback<$ClassPrefixEntity> {
              override fun onTaskLoaded(task: $ClassPrefixEntity?) {
                   task?.let {
                       if (task.code==0) {
                           liveData.value = task
                       } else {
                            onDataNotAvailable(0, "未获取到数据")
                       }
                   } ?: onDataNotAvailable(0, "未获取到数据")
              }

              override fun onDataNotAvailable(code: Int, desc: String?) {
                  ToastUtils.showShort(desc)
              }
         })
     }
}
