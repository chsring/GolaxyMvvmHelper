package $ClassPackageName;
import android.os.Bundle;

import com.srwing.b_applib.coreui.mvvm.MvvmBindingActivity;
import $ModulePackName.R;
import $ModulePackName.databinding.$BindingPrefixActivity$BindingMiddleBinding;
import $V_VMPackageName.$ClassPrefixViewModel;

import com.srwing.b_applib.recycle_adapter.adapter.delegate.RefreshLoadDelegate;

public class $ClassPrefixActivity extends MvvmBindingActivity<$BindingPrefixActivity$BindingMiddleBinding, $ClassPrefixViewModel>{

    RefreshLoadDelegate refreshLoadDelegate;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.$LayoutPrefix_activity_$LayoutSuffix);
        setTitle("");//TODO
        $ClassPrefixAdapter adapter = new $ClassPrefixAdapter(this);
        dataBinding.recyclerView.setAdapter(adapter);
        refreshLoadDelegate = RefreshLoadDelegate.builder(this)
                .observeRefresh(dataBinding.srlRefreshLayout)
                .observeAdapter(adapter)
                .setStartIndex(1)
                .subscribeRefresh((pageIndex, pageSize) -> {
                    viewModel.get$MethodName(pageIndex, pageSize);
                }).subscribeLoadMore(viewModel::get$MethodName)
                .build();

        viewModel.getLiveData().observe(this, data -> {
            if (data == null) {
                //请求失败时才会发送 null
                refreshLoadDelegate.onRequestFail();
                return;
            }
            // refreshLoadDelegate 内部维护了 加载更多和刷新的逻辑，所以在外面无须做判断
            refreshLoadDelegate.addRLData(data);
        });

        viewModel.getLiveData().observe(this, data -> {
             if (data == null) {
                 //请求失败时才会发送 null
                 refreshLoadDelegate.onRequestFail();
                 return;
             }
              // refreshLoadDelegate 内部维护了 加载更多和刷新的逻辑，所以在外面无须做判断
              refreshLoadDelegate.addRLData(data);
        });
        viewModel.get$MethodName(0, 15);
    }

}
