package $ClassPackageName;

import android.app.Application;
import androidx.lifecycle.MutableLiveData;
import androidx.annotation.NonNull;
import com.srwing.b_applib.coreui.BaseViewModel;
import com.srwing.t_network.base.BaseDataSource;
import com.blankj.utilcode.util.ToastUtils;
import $VM_MPackageName.$ClassPrefixEntity;
import $VM_MPackageName.$ClassPrefixRepository;
import com.srwing.t_network.http.CorrCode;
import android.text.TextUtils;
import java.util.List;

public class $ClassPrefixViewModel extends BaseViewModel {

     private $ClassPrefixRepository repository;

     private MutableLiveData<List<$ClassPrefixEntity.DataBean>> liveData = new MutableLiveData<>();

     public MutableLiveData<List<$ClassPrefixEntity.DataBean>> getLiveData() {
            return liveData;
      }

    public $ClassPrefixViewModel(@NonNull Application application) {
        super(application);
        repository = new $ClassPrefixRepository();
    }

    public void get$MethodName(int pageIndex, int pageSize) {
        repository.get$MethodName(pageIndex,pageSize,new BaseDataSource.GetTaskCallback<$ClassPrefixEntity>(){
               @Override
               public void onTaskLoaded($ClassPrefixEntity task) {
                     if (task != null) {
                          if (task.code == CorrCode.CODE_CORRECT.code) {

                          } else if (!TextUtils.isEmpty(task.msg)) {
                               ToastUtils.showShort(task.msg);
                          }
                     }
                     if (task.code == 0) {
                          liveData.setValue(task.data);
                     }
               }
               @Override
               public void onDataNotAvailable(int code, String desc) {
                   ToastUtils.showShort(desc);
               }
        });
     }

}
